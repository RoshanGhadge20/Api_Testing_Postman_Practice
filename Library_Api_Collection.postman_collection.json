{
	"info": {
		"_postman_id": "21687903-021d-452f-a59f-f35a65ef530d",
		"name": "Library Api Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26602136"
	},
	"item": [
		{
			"name": "Add Book to Library",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData=pm.response.json();\r",
							"\r",
							"console.log(jsonData);\r",
							"const bookid=jsonData.ID;\r",
							"pm.environment.set(\"bookID\", bookid);\r",
							"\r",
							"// Test 1\r",
							"pm.test(\"Validation of status/respnce code \",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(jsonData).have.property(\"Msg\");\r",
							"    pm.expect(jsonData.Msg).to.eql(\"successfully added\");\r",
							"})\r",
							"\r",
							"//Test 2\r",
							"pm.test(\"Headers, Cookies, ResponseTime, validation\",function()\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\");\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"    pm.expect(pm.response.text()).to.include(\"successfully added\");\r",
							"})\r",
							"\r",
							"\r",
							"//Test 3\r",
							"pm.test(\"Verify that content id uniquely generated each time\",function()\r",
							"{\r",
							"    const isbn_val=pm.collectionVariables.get(\"isbn\");\r",
							"    var  req=JSON.parse(pm.request.body.raw);\r",
							"    const aisl_val=req.aisle;\r",
							"    const actual_val=isbn_val+aisl_val;\r",
							"    pm.expect(actual_val).to.eql(bookid);\r",
							"    console.log(\"Content id is each time uniquelyy gets generated\");\r",
							"})\r",
							"\r",
							"\r",
							"//Test 4\r",
							"//pm.test(\"Working with .csv file\",function()\r",
							"//{\r",
							"//    pm.collectionVariables.set(bookname.pm.iterationData.get(\"BookName\"));\r",
							"//    pm.collectionVariables.set(authorname.pm.iterationData.get(\"Author\"));\r",
							"//})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.globals.get(\"companyCode\"));\r",
							"const code=pm.globals.get(\"companyCode\");\r",
							"const val=pm.variables.replaceIn('{{$randomInt}}');\r",
							"pm.collectionVariables.set(\"isbn\",code+val);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n\"name\":\"Selenium with java\",\r\n\"isbn\":\"{{isbn}}\",\r\n\"aisle\":\"111\",\r\n\"author\":\"{{authorname}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get book details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getbookresponse=pm.response.json();\r",
							"pm.test(\"validating the json reponse logic\",function()\r",
							"{\r",
							"    console.log(getbookresponse);\r",
							"    pm.expect(getbookresponse[0].author).to.eql(pm.collectionVariables.get(\"authorname\"));\r",
							"})\r",
							"\r",
							"const jsonSchema=\r",
							"{\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"book_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isbn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"aisle\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"author\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"book_name\",\r",
							"        \"isbn\",\r",
							"        \"aisle\",\r",
							"        \"author\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating the json schema for get method\", function()\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(jsonSchema);\r",
							"})\r",
							"\r",
							"pm.test(\"Validation of status code\", function()\r",
							"{\r",
							"    pm.response.to.have.status(\"200\");\r",
							"\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{bookID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{bookID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book from library",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema={\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"msg\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"msg\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validating status code\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"pm.test(\"Vaildating json response schema for delete method\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ID\":\"{{bookID}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request made in fork",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{bookID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{bookID}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "isbn",
			"value": "RG",
			"type": "string"
		},
		{
			"key": "authorname",
			"value": "RG",
			"type": "string"
		},
		{
			"key": "bookname",
			"value": "",
			"type": "string"
		}
	]
}